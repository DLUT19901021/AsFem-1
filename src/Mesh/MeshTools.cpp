//*****************************************************
//*** AsFem: A simple finite element method program ***
//*** Author: Yang Bai                              ***
//*** Bug report: walkandthinker@gmail.com          ***
//*** QQ group: 797998860                           ***
//*****************************************************
//*** Define the mesh generation tool               ***
//*** All the mesh should be generated by this class***
//*****************************************************

#include "Mesh/MeshTools.h"

MeshTools::MeshTools()
{
    cout<<"This is a mesh tool"<<endl;
}

void MeshTools::CreateMesh(double xmin,double xmax,int ne,string elmttype,Mesh &mesh)
{
    if(xmin>=xmax)
    {
        PetscSynchronizedPrintf(PETSC_COMM_WORLD,"*** Error: xmin=%12.6e is larger than xmax=12.6e!!!\n",xmin,xmax);
        PetscSynchronizedPrintf(PETSC_COMM_WORLD,"*** AsFem exit!\n");
        PetscFinalize();
        abort();
    }

    if(ne<2)
    {
        PetscSynchronizedPrintf(PETSC_COMM_WORLD,"*** Error: nx=%6d is too less for a FEM problem!!!\n",ne);
        PetscSynchronizedPrintf(PETSC_COMM_WORLD,"*** AsFem exit!\n");
        PetscFinalize();
        abort();
    }

    string str=RemoveSpace(elmttype);
    elmttype=StrToLower(str);
    if(elmttype.find("edge2")==string::npos&&
       elmttype.find("edge3")==string::npos&&
       elmttype.find("edge4")==string::npos)
    {
        PetscSynchronizedPrintf(PETSC_COMM_WORLD,"*** Error: unsupported mesh type !!!\n");
        PetscSynchronizedPrintf(PETSC_COMM_WORLD,"***        only type=edge2, edge3 or edge4 is supported for 1D mesh !!!\n");
        PetscSynchronizedPrintf(PETSC_COMM_WORLD,"*** AsFem exit!\n");
        PetscFinalize();
        abort();
    }

/*
    Xmin=xmin;Xmax=xmax;
    Nx=nx;
    nNodes=0;nNodesPerElmt=0;nElmts=0;
    MeshGenerated=false;
    ElmtType=elmttype;

    nBoundaryNodeIndex=0;
    MeshGenerated=false;
    */
}